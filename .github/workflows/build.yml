name: build

on:
  push:
  
  release:
    types: [published]
  workflow_dispatch:

jobs:
  windows-build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3
            
      - name: Setup C/C++ Compiler
        run: |
          curl "https://ghproxy.com/https://github.com/LittleYang0531/LittleYang0531/releases/download/g++/windows-x64.zip" -o gcc.zip
          unzip gcc.zip
      
      - name: Checking C/C++ Compiler
        run: |
          ./mingw/bin/g++ --version
        
      - name: Compiling Sonolus Server for Windows
        run: |
          ./mingw/bin/g++.exe main.cpp -osonolus -lmysql -lpthread -lcrypto -lssl -lwsock32 -ljson -std=c++14 -O2
          
      - name: Fetching Packages for Sonolus Server
        run: |
          curl "https://ghproxy.com/https://github.com/LittleYang0531/LittleYang0531/releases/download/g++/packages.zip" -o packages.zip
          mkdir packages
          mv packages.zip ./packages
          cd packages
          unzip packages.zip
          rm ./packages.zip
          rm sonolus.exe
      
      - name: Checking Sonolus Server for Windows
        run: |
          mv sonolus.exe ./packages
          cd packages
          ./sonolus help

      - name: Packaging Sonolus Server
        run: |
          mv ./config/* ./packages/config/ -Force
          mv ./i18n/* ./packages/i18n/ -Force
          mv ./web/css ./packages/web/ -Force
          mv ./web/js ./packages/web/ -Force
          mv ./web/html ./packages/web/ -Force
          mv ./CODE_OF_CONDUCT.md ./packages/ -Force
          mv ./data.sql ./packages/ -Force
          mv ./LICENSE.txt ./packages/ -Force
          mv ./README.md ./packages/ -Force
          mv ./README_en.md ./packages/ -Force
          Compress-Archive -Path ./packages/* -DestinationPath ./windows-x64.zip
          
      - name: Upload Sonolus Server
        uses: actions/upload-artifact@v3.1.2
        with:
          name: windows-x64
          path: ./packages/*
            
  android-build:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3
            
      - name: Setup C/C++ Compiler
        run: |
          echo "VERSION=${${{ github.ref }}%%/*}"
          # 安装交叉编译环境
          wget https://developer.arm.com/-/media/Files/downloads/gnu/12.2.rel1/binrel/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz
          tar -xvf arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz
          # 测试交叉编译环境
          export COMPILER=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu
          export INCLUDE=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/include/c++/12.2.1
          export LIBRARY=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/lib64
          $COMPILER-g++ --version
          
      - name: Cross-Compile libjsoncpp
        run: |
          export COMPILER=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu
          export INCLUDE=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/include/c++/12.2.1
          export LIBRARY=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/lib64
          
          # 在主机平台上编译 libjsoncpp
          git clone https://github.com/open-source-parsers/jsoncpp
          cd jsoncpp
          mkdir build && cd build
          cmake .. && make -j8
          cd ..
          
          # 交叉编译 libjsoncpp
          mkdir armBuild && cd armBuild
          CC="$COMPILER-gcc" CXX="$COMPILER-g++" AR="$COMPILER-ar" RANLIB="$COMPILER-ranlib" cmake .. -DCMAKE_SYSROOT="$LIBC" -DBUILD_SHARED_LIB=OFF
          echo "make -j8; echo Error!" > tmp.sh
          bash tmp.sh
          cp ../build/bin/* ./bin/
          make -j8
          mkdir $INCLUDE/jsoncpp
          cp ../include/json $INCLUDE/jsoncpp -r
          cp ./lib/libjsoncpp.a $LIBRARY/
          cp ./lib/libjsoncpp.so.1.9.5 $LIBRARY/
          ln $LIBRARY/libjsoncpp.so.1.9.5 $LIBRARY/libjsoncpp.so.25
          ln $LIBRARY/libjsoncpp.so.1.9.5 $LIBRARY/libjsoncpp.so
      
      - name: Cross-Compile libcrypto & libssl
        run: |
          export COMPILER=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu
          export INCLUDE=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/include/c++/12.2.1
          export LIBRARY=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/lib64
          
          # 交叉编译 libcrypto & libssl
          wget https://www.openssl.org/source/openssl-1.1.1t.tar.gz
          tar -xvf openssl-1.1.1t.tar.gz
          cd openssl-1.1.1t
          ./config --prefix="$(pwd)/output" no-zlib no-asm -DOPENSSL_THREADS -pthread -D_REENTRANT -D_THREAD_SAFE -D_THREADSAFE
          sed -i 's/-m64//g' Makefile
          make CC="$COMPILER-gcc" AR="$COMPILER-ar" RANLIB="$COMPILER-ranlib" -j16
          make install
          
          # 复制必要文件
          ls -lh ./output/lib
          cp ./include/* $INCLUDE/ -r
          cp ./output/lib/libssl.a $LIBRARY/
          cp ./output/lib/libcrypto.a $LIBRARY/
          cp ./output/lib/libcrypto.so.1.1 $LIBRARY/
          ln $LIBRARY/libcrypto.so.1.1 $LIBRARY/libcrypto.so
          cp ./output/lib/libssl.so.1.1 $LIBRARY/
          ln $LIBRARY/libssl.so.1.1 $LIBRARY/libssl.so
          
      - name: Cross-Compile libmysqlclient
        run: |
          export LIBC=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/libc
          export COMPILER=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu
          export INCLUDE=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/include/c++/12.2.1
          export LIBRARY=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/lib64
          export OPENSSL=$(pwd)/openssl-1.1.1t
          
          # 降级cmake
          wget https://cmake.org/files/v3.16/cmake-3.16.3-Linux-x86_64.tar.gz
          tar -xvf cmake-3.16.3-Linux-x86_64.tar.gz
          export CMAKE=$(pwd)/cmake-3.16.3-Linux-x86_64/bin/cmake
          
          # 在主机平台上编译 libmysqlclient
          wget https://downloads.mysql.com/archives/get/p/19/file/mysql-connector-c-6.1.11-src.tar.gz
          tar -xvf mysql-connector-c-6.1.11-src.tar.gz
          cd mysql-connector-c-6.1.11-src
          mkdir build && cd build
          $CMAKE .. -DOPENSSL_INCLUDE_DIR="/usr/include"
          make && cd ..
          
          # 交叉编译 libmysqlclient
          mkdir armBuild
          cd armBuild
          CC="$COMPILER-gcc" CXX="$COMPILER-g++" AR="$COMPILER-ar" RANLIB="$COMPILER-ranlib" $CMAKE .. -DCMAKE_SYSROOT="$LIBC"\
                   -DSTACK_DIRECTION=1\
                   -DHAVE_LLVM_LIBCPP=OFF\
                   -DHAVE_C_FLOATING_POINT_OPTIMIZATION_PROBLEMS=OFF\
                   -DHAVE_CXX_FLOATING_POINT_OPTIMIZATION_PROBLEMS=OFF\
                   -DOPENSSL_ROOT_DIR="$OPENSSL/output"
          echo "make; echo Error!" > tmp.sh
          bash tmp.sh
          echo "cp ../build/extra/* ./extra; echo OK;" > tmp.sh
          bash tmp.sh
          make
          cp ./libmysql/libmysqlclient.a $LIBRARY/libmysqlclient.a
          cp ./libmysql/libmysqlclient.so.18.4. $LIBRARY/libmysqlclient.so.18.4.
          ln $LIBRARY/libmysqlclient.so.18.4. $LIBRARY/libmysqlclient.so.18
          ln $LIBRARY/libmysqlclient.so.18.4. $LIBRARY/libmysqlclient.so
          cp ../include $INCLUDE/mysql -r
          mv $INCLUDE/mysql/mysql_version.h.in $INCLUDE/mysql/mysql_version.h
          
      - name: Compile Sonolus Server for Android
        run: |
          export COMPILER=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu
          export INCLUDE=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/include/c++/12.2.1
          export LIBRARY=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/lib64
          $COMPILER-g++ main.cpp -omain -lmysqlclient -ljsoncpp -lpthread -lcrypto -lssl -std=c++14 -O2
          
      - name: Upload Sonolus Server
        uses: actions/upload-artifact@v3.1.2
        with:
          name: android-aarch64
          path: ./main
          
  publish:
    runs-on: ubuntu-20.04
    needs: [windows-build, android-build]
    steps:
      - uses: actions/checkout@v3
  
      - name: Download Sonolus Server for Windows
        uses: actions/download-artifact@v3.0.2
        with:
          name: windows-x64
          path: ./windows-x64
  
      - name: Download Sonolus Server for Android
        uses: actions/download-artifact@v3.0.2
        with:
          name: android-aarch64
          path: ./android-aarch64
      
      - name: Package Sonolus Server
        run: |
          zip windows-x64.zip ./windows-x64/* -r
          zip android-aarch64.zip ./android-aarch64/* -r
          
      - name: Rewrite the Version
        run: |
          echo "VERSION=${${{ github.ref }}%%/*}" >> $GITHUB_ENV
          
      - name: Upload Github Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ env.VERSION }}
          title: Sonolus Server ${{ env.VERSION }}
          prerelease: false
          files: |
            windows-x64.zip
            android-aarch64.zip
