# This is a basic workflow to help you get started with Actions

name: android-build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:
  
env:
  VERSION: v1.2.0

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
            
#       - name: Setup C/C++ Compiler
#         run: |
#           # 安装交叉编译环境
#           wget https://developer.arm.com/-/media/Files/downloads/gnu/12.2.rel1/binrel/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz
#           tar -xvf arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz

#           # 测试交叉编译环境
#           export COMPILER=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu
#           export INCLUDE=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/include/c++/12.2.1
#           export LIBRARY=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/lib64
#           $COMPILER-g++ --version
      
#       - name: Cross-Compile libcrypto & libssl
#         run: |
#           export COMPILER=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu
#           export INCLUDE=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/include/c++/12.2.1
#           export LIBRARY=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/lib64
          
#           # 交叉编译 libcrypto & libssl
#           wget https://www.openssl.org/source/openssl-1.1.1t.tar.gz
#           tar -xvf openssl-1.1.1t.tar.gz
#           cd openssl-1.1.1t
#           ./config --prefix="$(pwd)" no-shared no-zlib no-asm -DOPENSSL_THREADS -pthread -D_REENTRANT -D_THREAD_SAFE -D_THREADSAFE
#           sed -i 's/-m64//g' Makefile
#           make CC="$COMPILER-gcc" AR="$COMPILER-ar" RANLIB="$COMPILER-ranlib" -j8
          
#           # 复制必要文件
#           cp ./include/* $INCLUDE/ -r
#           cp ./libssl.a $LIBRARY/
#           cp ./libcrypto.a $LIBRARY/

      - name: Cross-Compile libmysqlclient
        run: |
          export COMPILER=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu
          export INCLUDE=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/include/c++/12.2.1
          export LIBRARY=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/lib64
          
          # 在主机平台上编译 libmysqlclient
          sudo apt install cmake openssl libssl-dev
          wget https://dev.mysql.com/get/Downloads/Connector-C++/mysql-connector-c++-8.0.30-src.tar.gz
          tar -xvf mysql-connector-c++-8.0.30-src.tar.gz
          cd mysql-connector-c++-8.0.30-src
          mkdir build && cd build
          export MAKEFLAGS=-l2
          cmake .. && make
          export PATH=$PATH:$(pwd)/extra && cd ..
          
          # 交叉编译 libmysqlclient
          mkdir armBuild
          cat > CMakeLists.txt<<EOF
          #####################################################
          SET(CMAKE_SYSTEM_NAME Linux)
          SET(CMAKE_SYSTEM_VERSION 1)
          set(CMAKE_SYSROOT "$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/libc")
          # specify the cross compiler
          set(CMAKE_C_COMPILER "$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-gcc")
          set(CMAKE_CXX_COMPILER "$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-g++")

          # search for programs in the build host directories
          SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          # for libraries and headers in the target directories
          SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

          SET(STACK_DIRECTION 1)
          SET(HAVE_LLVM_LIBCPP OFF)
          SET(HAVE_C_FLOATING_POINT_OPTIMIZATION_PROBLEMS OFF)
          SET(HAVE_CXX_FLOATING_POINT_OPTIMIZATION_PROBLEMS OFF)
          #####################################################
          EOF
          cd armBuild && cmake ..
          make
          ls
          
          
#       - name: Test Github Release
#         uses: marvinpinto/action-automatic-releases@latest
#         with:
#           repo_token: "${{ secrets.GITHUB_TOKEN }}"
#           automatic_release_tag: ${{ env.VERSION }}
#           title: Sonolus Server ${{ env.VERSION }}
#           prerelease: false
#           files: |
#             windows-x64.zip
