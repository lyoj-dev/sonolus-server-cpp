# This is a basic workflow to help you get started with Actions

name: android-build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:
  
env:
  VERSION: v1.2.0

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
            
      - name: Setup C/C++ Compiler
        run: |
          # 安装交叉编译环境
          wget https://developer.arm.com/-/media/Files/downloads/gnu/12.2.rel1/binrel/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz
          tar -xvf arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz
          # 测试交叉编译环境
          export COMPILER=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu
          export INCLUDE=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/include/c++/12.2.1
          export LIBRARY=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/lib64
          $COMPILER-g++ --version
          
      - name: Cross-Compile libjsoncpp
        run: |
          export COMPILER=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu
          export INCLUDE=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/include/c++/12.2.1
          export LIBRARY=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/lib64
          
          # 在主机平台上编译 libjsoncpp
          git clone https://github.com/open-source-parsers/jsoncpp
          cd jsoncpp
          mkdir build && cd build
          cmake .. && make -j8
          cd ..
          
          # 交叉编译 libjsoncpp
          mkdir armBuild && cd armBuild
          CC="$COMPILER-gcc" CXX="$COMPILER-g++" AR="$COMPILER-ar" RANLIB="$COMPILER-ranlib" cmake .. -DCMAKE_SYSROOT="$LIBC" -DBUILD_SHARED_LIB=OFF
          echo "make -j8; echo Error!" > tmp.sh
          bash tmp.sh
          cp ../build/bin/* ./bin/
          make -j8
          mkdir $INCLUDE/jsoncpp
          cp ../include/json $INCLUDE/jsoncpp -r
          cp ./lib/libjsoncpp.a $LIBRARY/
          cp ./lib/libjsoncpp.so.1.9.5 $LIBRARY/
          ln $LIBRARY/libjsoncpp.so.1.9.5 $LIBRARY/libjsoncpp.so.25
          ln $LIBRARY/libjsoncpp.so.1.9.5 $LIBRARY/libjsoncpp.so
      
      - name: Cross-Compile libcrypto & libssl
        run: |
          export COMPILER=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu
          export INCLUDE=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/include/c++/12.2.1
          export LIBRARY=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/lib64
          
          # 交叉编译 libcrypto & libssl
          wget https://www.openssl.org/source/openssl-1.1.1t.tar.gz
          tar -xvf openssl-1.1.1t.tar.gz
          cd openssl-1.1.1t
          ./config --prefix="$(pwd)/output" no-zlib no-asm -DOPENSSL_THREADS -pthread -D_REENTRANT -D_THREAD_SAFE -D_THREADSAFE
          sed -i 's/-m64//g' Makefile
          make CC="$COMPILER-gcc" AR="$COMPILER-ar" RANLIB="$COMPILER-ranlib" -j16
          make install
          
          # 复制必要文件
          ls -lh ./output/lib
          cp ./include/* $INCLUDE/ -r
          cp ./output/lib/libssl.a $LIBRARY/
          cp ./output/lib/libcrypto.a $LIBRARY/
          cp ./output/lib/libcrypto.so.1.1 $LIBRARY/
          ln $LIBRARY/libcrypto.so.1.1 $LIBRARY/libcrypto.so
          cp ./output/lib/libssl.so.1.1 $LIBRARY/
          ln $LIBRARY/libssl.so.1.1 $LIBRARY/libssl.so
          
      - name: Cross-Compile libmysqlclient
        run: |
          export LIBC=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/libc
          export COMPILER=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu
          export INCLUDE=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/include/c++/12.2.1
          export LIBRARY=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/lib64
          export OPENSSL=$(pwd)/openssl-1.1.1t
          
          # 降级cmake
          wget https://cmake.org/files/v3.16/cmake-3.16.3-Linux-x86_64.tar.gz
          tar -xvf cmake-3.16.3-Linux-x86_64.tar.gz
          export CMAKE=$(pwd)/cmake-3.16.3-Linux-x86_64/bin/cmake
          
          # 在主机平台上编译 libmysqlclient
          wget https://downloads.mysql.com/archives/get/p/19/file/mysql-connector-c-6.1.11-src.tar.gz
          tar -xvf mysql-connector-c-6.1.11-src.tar.gz
          cd mysql-connector-c-6.1.11-src
          mkdir build && cd build
          $CMAKE .. -DOPENSSL_INCLUDE_DIR="/usr/include"
          make && cd ..
          
          # 交叉编译 libmysqlclient
          mkdir armBuild
          cd armBuild
          CC="$COMPILER-gcc" CXX="$COMPILER-g++" AR="$COMPILER-ar" RANLIB="$COMPILER-ranlib" $CMAKE .. -DCMAKE_SYSROOT="$LIBC"\
                   -DSTACK_DIRECTION=1\
                   -DHAVE_LLVM_LIBCPP=OFF\
                   -DHAVE_C_FLOATING_POINT_OPTIMIZATION_PROBLEMS=OFF\
                   -DHAVE_CXX_FLOATING_POINT_OPTIMIZATION_PROBLEMS=OFF\
                   -DOPENSSL_ROOT_DIR="$OPENSSL/output"
          echo "make; echo Error!" > tmp.sh
          bash tmp.sh
          cp ../build/extra/* ./extra -r
          make
          cp ./libmysql/libmysqlclient.a $LIBRARY/libmysqlclient.a
          cp ./libmysql/libmysqlclient.so.18.4. $LIBRARY/libmysqlclient.so.18.4.
          ln $LIBRARY/libmysqlclient.so.18.4. $LIBRARY/libmysqlclient.so.18
          ln $LIBRARY/libmysqlclient.so.18.4. $LIBRARY/libmysqlclient.so
          cp ../include $INCLUDE/mysql -r
          mv $INCLUDE/mysql/mysql_version.h.in $INCLUDE/mysql/mysql_version.h
          
      - name: Compile Sonolus Server for Android
        run: |
          export COMPILER=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu
          export INCLUDE=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/include/c++/12.2.1
          export LIBRARY=$(pwd)/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-linux-gnu/aarch64-none-linux-gnu/lib64
          $COMPILER-g++ main.cpp -omain -lmysqlclient -ljsoncpp -lpthread -lcrypto -lssl -std=c++14 -O2
          
      - name: Packaging Sonolus Server
        run: |
          zip android-aarch64.zip main
          
      - name: Test Github Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ env.VERSION }}
          title: Sonolus Server ${{ env.VERSION }}
          prerelease: false
          files: |
            android-aarch64.zip
